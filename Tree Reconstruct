#include <iostream>
#include <vector>
#include <unordered_map>
using namespace std;

struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

unordered_map<int, int> index_map;

TreeNode* buildTreeHelper(vector<int>& preorder, vector<int>& inorder, int pre_left, int pre_right, int in_left, int in_right) {
    if (pre_left > pre_right) return NULL;
    int pre_root = pre_left;
    int in_root = index_map[preorder[pre_root]];
    TreeNode* root = new TreeNode(preorder[pre_root]);
    int left_subtree_size = in_root - in_left;
    root->left = buildTreeHelper(preorder, inorder, pre_left + 1, pre_left + left_subtree_size, in_left, in_root - 1);
    root->right = buildTreeHelper(preorder, inorder, pre_left + left_subtree_size + 1, pre_right, in_root + 1, in_right);
    return root;
}

TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
    int n = preorder.size();
    for (int i = 0; i < n; i++) {
        index_map[inorder[i]] = i;
    }
    return buildTreeHelper(preorder, inorder, 0, n - 1, 0, n - 1);
}

void postorderTraversal(TreeNode* root, vector<int>& res) {
    if (root == NULL) return;
    postorderTraversal(root->left, res);
    postorderTraversal(root->right, res);
    res.push_back(root->val);
}

int main() {
    int n;
    cin >> n;
    vector<int> preorder(n), inorder(n);
    for (int i = 0; i < n; i++) {
        cin >> preorder[i];
    }
    for (int i = 0; i < n; i++) {
        cin >> inorder[i];
    }
    TreeNode* root = buildTree(preorder, inorder);
    vector<int> postorder;
    postorderTraversal(root, postorder);
    for (int i = 0; i < n; i++) {
        cout << postorder[i];
        if (i < n - 1) cout << " ";
    }
    cout << endl;
    return 0;
}
